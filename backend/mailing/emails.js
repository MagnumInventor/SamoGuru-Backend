// emailService.js - –í–µ—Ä—Å—ñ—è –∑ fetch
import { sendBrevoEmail, sender } from "./brevo.config.js";
import {
	PASSWORD_RESET_REQUEST_TEMPLATE,
	PASSWORD_RESET_SUCCESS_TEMPLATE,
	VERIFICATION_EMAIL_TEMPLATE,
} from "./emailTemplates.js";

export const sendVerificationEmail = async (email, verificationToken) => {
	try {
		const emailData = {
			to: [{ email: email }],
			sender: { name: sender.name, email: sender.email },
			subject: "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∞—à—É –ø–æ—à—Ç—É - SamoGuru",
			htmlContent: VERIFICATION_EMAIL_TEMPLATE.replace("{verificationCode}", verificationToken),
			tags: ["email_verification"]
		};

		const response = await sendBrevoEmail(emailData);
		console.log("Email sent successfully", response);
		return response;
	} catch (error) {
		console.error(`Error sending verification`, error);
		throw new Error(`Error sending verification email: ${error}`);
	}
};

export const sendWelcomeEmail = async (email, name) => {
	try {
		const welcomeTemplate = `
			<!DOCTYPE html>
			<html lang="uk">
			<head>
				<meta charset="UTF-8">
				<meta name="viewport" content="width=device-width, initial-scale=1.0">
				<title>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ SamoGuru</title>
			</head>
			<body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
				<div style="background: linear-gradient(to right, #10b981, #059669); padding: 20px; text-align: center;">
					<h1 style="color: white; margin: 0;">üéâ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ SamoGuru!</h1>
				</div>
				<div style="background-color: #f9f9f9; padding: 20px; border-radius: 0 0 5px 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1);">
					<p>–ü—Ä–∏–≤—ñ—Ç, <strong>${name}</strong>!</p>
					<p>–í—ñ—Ç–∞—î–º–æ –∑ —É—Å–ø—ñ—à–Ω–æ—é —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—î—é –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ SamoGuru!</p>
					<div style="text-align: center; margin: 30px 0;">
						<div style="background-color: #10b981; color: white; width: 80px; height: 80px; line-height: 80px; border-radius: 50%; display: inline-block; font-size: 40px;">
							üéØ
						</div>
					</div>
					<p>–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤—Å—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ –¥–ª—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Å–≤–æ—î—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ.</p>
					<div style="text-align: center; margin: 30px 0;">
						<a href="https://www.samoguru.run.place" style="background-color: #10b981; color: white; padding: 12px 20px; text-decoration: none; border-radius: 5px; font-weight: bold;">–ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Ä–æ–±–æ—Ç–∏</a>
					</div>
					<p>–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è, –Ω–µ —Å–æ—Ä–æ–º—Ç–µ—Å—è –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –¥–æ –Ω–∞—à–æ—ó —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.</p>
					<p>–£—Å–ø—ñ—Ö—ñ–≤ —É –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—ñ –≤–∞—à–∏—Ö —Ü—ñ–ª–µ–π!</p>
					<p>–ó –Ω–∞–π–∫—Ä–∞—â–∏–º–∏ –ø–æ–±–∞–∂–∞–Ω–Ω—è–º–∏,<br>–ö–æ–º–∞–Ω–¥–∞ SamoGuru</p>
				</div>
				<div style="text-align: center; margin-top: 20px; color: #888; font-size: 0.8em;">
					<p>–¶–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ —Ü–µ–π –ª–∏—Å—Ç.</p>
				</div>
			</body>
			</html>
		`;

		const emailData = {
			to: [{ email: email, name: name }],
			sender: { name: sender.name, email: sender.email },
			subject: "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ SamoGuru! üéâ",
			htmlContent: welcomeTemplate,
			tags: ["welcome_email"]
		};

		const response = await sendBrevoEmail(emailData);
		console.log("Welcome email sent successfully", response);
		return response;
	} catch (error) {
		console.error(`Error sending welcome email`, error);
		throw new Error(`Error sending welcome email: ${error}`);
	}
};

export const sendPasswordResetEmail = async (email, resetURL) => {
	try {
		const emailData = {
			to: [{ email: email }],
			sender: { name: sender.name, email: sender.email },
			subject: "–°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è - SamoGuru",
			htmlContent: PASSWORD_RESET_REQUEST_TEMPLATE.replace("{resetURL}", resetURL),
			tags: ["password_reset"]
		};

		const response = await sendBrevoEmail(emailData);
		console.log("–õ–∏—Å—Ç –ø—Ä–æ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π", response);
		return response;
	} catch (error) {
		console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ª–∏—Å—Ç—É –ø—Ä–æ —Å–∫–∏–¥—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é`, error);
		throw new Error(`–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ª–∏—Å—Ç—É –ø—Ä–æ —Å–∫–∏–¥—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é: ${error}`);
	}
};

export const sendResetSuccessEmail = async (email) => {
	try {
		const emailData = {
			to: [{ email: email }],
			sender: { name: sender.name, email: sender.email },
			subject: "–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ —Å–∫–∏–Ω—É—Ç–æ - SamoGuru",
			htmlContent: PASSWORD_RESET_SUCCESS_TEMPLATE,
			tags: ["password_reset_success"]
		};

		const response = await sendBrevoEmail(emailData);
		console.log("Password reset success email sent successfully", response);
		return response;
	} catch (error) {
		console.error(`Error sending password reset success email`, error);
		throw new Error(`Error sending password reset success email: ${error}`);
	}
};

// –¢–µ—Å—Ç–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è
export const testBrevoConnection = async () => {
	try {
		const emailData = {
			to: [{ email: "samoguru.main@gmail.com" }],
			sender: { name: sender.name, email: sender.email },
			subject: "üß™ Brevo Connection Test - SamoGuru",
			htmlContent: `
				<div style="padding: 20px; font-family: Arial, sans-serif;">
					<h2>‚úÖ Brevo —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ!</h2>
					<p>–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: ${sender.email}</p>
					<p>–ß–∞—Å: ${new Date().toLocaleString('uk-UA')}</p>
					<p>API: REST (–±–µ–∑ SDK)</p>
				</div>
			`,
			tags: ["connection_test"]
		};

		const response = await sendBrevoEmail(emailData);
		console.log("‚úÖ Brevo connection test successful:", response);
		return response;
	} catch (error) {
		console.error("‚ùå Brevo connection test failed:", error);
		throw error;
	}
};